import{_ as e,o as n,c as t,a as o}from"./app.4217e908.js";const a={},i=o('<h1 id="provet" tabindex="-1"><a class="header-anchor" href="#provet" aria-hidden="true">#</a> Provet</h1><h2 id="connection-details" tabindex="-1"><a class="header-anchor" href="#connection-details" aria-hidden="true">#</a> Connection details</h2><p>In production all instances of Provet within a country should share the same base URL and API Token. This means that the base URL and API token configuration happens at a Organisation Group level.</p><p>The way this happens is that an Organisation Group has a &#39;ProvetConnectionName&#39; which maps to the connections that are defined in appsettings.json under the property <code>Provet.Connections</code>. This connection config contains a ApiTokenKeyVaultName, which is the name that will be looked up in Azure KeyVault to get the API Token.</p><h3 id="adding-a-new-connection" tabindex="-1"><a class="header-anchor" href="#adding-a-new-connection" aria-hidden="true">#</a> Adding a new connection</h3><ul><li>Add the Token as a secret in Azure KeyVault for all environments you wish to use that connection on, giving it a useful name (like &#39;ProvetNetherlandsApiToken&#39;)</li><li>In the appsettings.json files appropriate for the environments you wish to use that connection on add a new connection object (following the examples already there, setting the <code>ApiTokenKeyVaultName</code> to be the name you chose in the step above)</li><li>Deploy the changes to the server config</li><li>Create or edit an Organisation Group and set the Provet Connection Name to the name you chose for the connection in your config</li></ul><h3 id="local-development" tabindex="-1"><a class="header-anchor" href="#local-development" aria-hidden="true">#</a> Local development</h3><p>For local development we don&#39;t use Azure KeyVault to get the ApiToken, instead we use .NET Cores Secrets to inject a universal APIToken. See the Zero To Hero in the base README.md for instructions on how to set this up.</p>',8),s=[i];function r(h,c){return n(),t("div",null,s)}const d=e(a,[["render",r],["__file","Merlin.html.vue"]]);export{d as default};
